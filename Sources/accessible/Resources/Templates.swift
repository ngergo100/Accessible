import PathKit

// Until swift package manager does not support adding resources to the project, it is inevitable to add stencil file as a string literal

let accessibilityIdentifiers: String = """
// Generated by AccessibleStoryboard on {{ date }}

// swiftlint:disable all

enum {{ accessibiltyEnumName }} {
{% for storyboard in storyboards %}
    enum {{ storyboard.name }} {
    {% for viewController in storyboard.viewControllers %}

        struct {{ viewController.name }} {
            static let rootView = "{{ accessibiltyEnumName }}.{{ storyboard.name }}.{{ viewController.name }}.rootView"
            {% for connectionTemplate in viewController.connections %}
            struct {{ connectionTemplate.name|upperFirstLetter }} {
                {% for connection in connectionTemplate.connections %}
                static let {{ connection }} = "{{ accessibiltyEnumName }}.{{ storyboard.name }}.{{ viewController.name }}.{{ connectionTemplate.name|upperFirstLetter }}.{{ connection }}"
                {% endfor %}
            }
    {% endfor %}
        }
{% endfor %}
    }

{% endfor %}
}
"""

let extensions: String = """
// Generated by AccessibleStoryboard on {{ date }}

// swiftlint:disable all

protocol UITestable {
    func setAccessibilityIdentifiers()
}

{% for storyboard in storyboards %}
{% for viewController in storyboard.viewControllers %}
extension {{ viewController.name }}ViewController: UITestable {
    func setAccessibilityIdentifiers() {
        view.accessibilityIdentifier = {{ accessibiltyEnumName }}.{{ storyboard.name }}.{{ viewController.name }}.rootView
        {% for connectionTemplate in viewController.connections %}
        {% for connection in connectionTemplate.connections %}
        {{ connection }}.accessibilityIdentifier = {{ accessibiltyEnumName }}.{{ storyboard.name }}.{{ viewController.name }}.{{ connectionTemplate.name|upperFirstLetter }}.{{ connection }}
        {% endfor %}
        {% endfor %}
    }
}

{% endfor %}
{% endfor %}
"""

let tapMans: String = """
// Generated by AccessibleStoryboard on {{ date }}

// swiftlint:disable all

import XCTest

class TapMan {

    let app: XCUIApplication

    init() {
        self.app = XCUIApplication()
    }
}

class AccessibleElement<T> {

    let element: XCUIElement
    private let tapMan: T

    init(element: XCUIElement, tapMan: T) {
        self.element = element
        self.tapMan = tapMan
    }

    // Actions

    @discardableResult func tap() -> T {
        element.tap()
        return tapMan
    }

    @discardableResult func doubleTap() -> T {
        element.doubleTap()
        return tapMan
    }

    @discardableResult func twoFingerTap() -> T {
        element.twoFingerTap()
        return tapMan
    }

    @discardableResult func tap(withNumberOfTaps numberOfTaps: Int, numberOfTouches: Int) -> T {
        element.tap(withNumberOfTaps: numberOfTaps, numberOfTouches: numberOfTouches)
        return tapMan
    }

    @discardableResult func press(forDuration duration: TimeInterval) -> T {
        element.press(forDuration: duration)
        return tapMan
    }

    @discardableResult func press(forDuration duration: TimeInterval, thenDragTo otherElement: XCUIElement) -> T {
        element.press(forDuration: duration, thenDragTo: otherElement)
        return tapMan
    }

    @discardableResult func swipeUp() -> T {
        element.swipeUp()
        return tapMan
    }

    @discardableResult func swipeDown() -> T {
        element.swipeDown()
        return tapMan
    }

    @discardableResult func swipeLeft() -> T {
        element.swipeLeft()
        return tapMan
    }

    @discardableResult func swipeRight() -> T {
        element.swipeRight()
        return tapMan
    }

    @discardableResult func pinch(withScale scale: CGFloat, velocity: CGFloat) -> T {
        element.pinch(withScale: scale, velocity: velocity)
        return tapMan
    }

    @discardableResult func rotate(_ rotation: CGFloat, withVelocity velocity: CGFloat) -> T {
        element.rotate(rotation, withVelocity: velocity)
        return tapMan
    }

    // Checks

    @discardableResult func exists() -> T {
        XCTAssert(element.exists)
        return tapMan
    }

    @discardableResult func notExists() -> T {
        XCTAssert(!element.exists)
        return tapMan
    }

    @discardableResult func isSelected() -> T {
        XCTAssert(element.isSelected)
        return tapMan
    }

    @discardableResult func isNotSelected() -> T {
        XCTAssert(!element.isSelected)
        return tapMan
    }

    @discardableResult func isEnabled() -> T {
        XCTAssert(element.isEnabled)
        return tapMan
    }

    @discardableResult func isNotEnabled() -> T {
        XCTAssert(!element.isEnabled)
        return tapMan
    }

    @discardableResult func isHittable() -> T {
        XCTAssert(element.isHittable)
        return tapMan
    }

    @discardableResult func isNotHittable() -> T {
        XCTAssert(!element.isHittable)
        return tapMan
    }
}

{% for storyboard in storyboards %}
{% for viewController in storyboard.viewControllers %}
class {{ viewController.name }}TapMan: TapMan {
    var rootView: AccessibleElement<{{ viewController.name }}TapMan> {
        return AccessibleElement(element: app.otherElements[{{ accessibiltyEnumName }}.{{ storyboard.name }}.{{ viewController.name }}.rootView], tapMan: self)
    }
{% for connectionTemplate in viewController.connections %}
{% for connection in connectionTemplate.connections %}
    var {{ connection }}: AccessibleElement<{{ viewController.name }}TapMan> {
        return AccessibleElement(element: app.{{ connectionTemplate.name }}[{{ accessibiltyEnumName }}.{{ storyboard.name }}.{{ viewController.name }}.{{ connectionTemplate.name|upperFirstLetter }}.{{ connection }}], tapMan: self)
    }
{% endfor %}
{% endfor %}
}
{% endfor %}
{% endfor %}
"""
